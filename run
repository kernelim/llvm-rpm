#!/bin/bash

set -eu

prep-mock-config() {
    local tmpfs_build=$1

    rm -rf mock-config
    mkdir -p mock-config

    cp -a mock-config-base/epel-7-with-local-deps.cfg mock-config/epel-7-with-local-deps.cfg

    sed -i mock-config/epel-7-with-local-deps.cfg -e 's/x86_64/'$(uname -p)'/g'

    if [[ $tmpfs_build == "1" ]] ; then
	echo Enabling tmpfs build

	echo """
config_opts['plugin_conf']['tmpfs_enable'] = True
config_opts['plugin_conf']['tmpfs_opts'] = {}
config_opts['plugin_conf']['tmpfs_opts']['required_ram_mb'] = 128000
config_opts['plugin_conf']['tmpfs_opts']['max_fs_size'] = '40g'
config_opts['plugin_conf']['tmpfs_opts']['mode'] = '0755'
config_opts['plugin_conf']['tmpfs_opts']['keep_mounted'] = True
	""" >> mock-config/epel-7-with-local-deps.cfg
    fi
}

root-setup() {
    local tmpfs_build=0

    while [[ $# != 0 ]] ; do
        if [[ "$1" == "--tmpfs-build" ]] || [[ "$1" == "-t" ]] ; then
	    local tmpfs_build=1
            shift
            continue
        fi
        if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]] ; then
	    echo "--tmpfs-build             -t"
	    exit 0
        fi
        break
    done

    sudo yum install -y epel-release sudo
    sudo yum install -y fedpkg createrepo wget

    prep-mock-config $tmpfs_build

    if [[ -e templates/epel-7.tpl ]] ; then
	local include=templates/epel-7.tpl
    elif [[ -e /etc/mock/epel-7-$(uname -i).cfg ]] ; then
	local include="/etc/mock/epel-7-$(uname -i).cfg"
    else
	echo "Cannot define a valid Mock configuration"
	exit -1
    fi

    echo 'include("'${include}'")' > mock-config/epel-7-with-local-deps-include.cfg
    sudo bash -c 'cat mock-config/epel-7-with-local-deps-include.cfg > /etc/mock/epel-7-with-local-deps.cfg'
    rm -f mock-config/epel-7-with-local-deps-include.cfg

    sudo bash -c 'cat mock-config/epel-7-with-local-deps.cfg >> /etc/mock/epel-7-with-local-deps.cfg'
    rm -rf mock-config/

    if [[ ! -x /opt/repo/epel-7-with-local-deps ]] ; then
	sudo mkdir -p /opt/repo/epel-7-with-local-deps
	sudo chown $(id -u).$(id -g) /opt/repo/epel-7-with-local-deps
    fi

    createrepo /opt/repo/epel-7-with-local-deps

    mock --init --root epel-7-with-local-deps
}

build-base-image() {
    echo "Updating base Docker image"

    #
    # Image hashes taken from:
    #
    # https://hub.docker.com/_/centos?tab=tags&page=1&ordering=last_updated
    #
    case $(uname -p) in
	x86_64)
	    BASE_IMAGE=c2f1d5a9c0a81350fa0ad7e1eee99e379d75fe53823d44b5469eb2eb6092c941
	    ;;
	aarch64)
	    BASE_IMAGE=43964203bf5d7fe38c6fca6166ac89e4c095e2b0c0a28f6c7c678a1348ddc7fa
	    ;;
	*)
	    echo "Architecture not supported"
	    ;;
    esac

    echo """
# CentOS 7

FROM centos@sha256:${BASE_IMAGE}

RUN rm -f /root/*.cfg
RUN mkdir /workspace

RUN yum install -y epel-release sudo
RUN yum install -y fedpkg createrepo wget
""" > Dockerfile

    mkdir -p empty/
    docker build -f Dockerfile -t llvm-rpm:base empty/
    rmdir empty
    rm -f Dockerfile
}

spin-up-instance() {
    docker rm -f llvm-rpm-run 2>/dev/null || true
    mkdir -p ${PWD}/repo
    docker run --rm -dit --name llvm-rpm-run --privileged -w /workspace -v /tmp:/tmp \
	-v ${PWD}/repo:/opt/repo/epel-7-with-local-deps -v ${PWD}:/workspace llvm-rpm:base bash
}

pkgbuild() {
    echo "Building $1"

    local dest=/opt/repo/epel-7-with-local-deps
    local name=$1
    cd pkgs/${name}
    shift

    while [[ $# != 0 ]] ; do
        if [[ "$1" == "--name" ]] ; then
	    shift
	    local name=$1
            shift
            continue
        fi
        break
    done

    rm -rf *.src.rpm
    rm -rf results_${name}*
    fedpkg --name ${name} --release el7 mockbuild --root epel-7-with-local-deps "$@"
    rm -rf ${dest}/results_${name}
    mv results_${name} ${dest}
    createrepo ${dest}
    cd ../..
}

under-container() {
    local skip_build_image=0
    local skip_spin_up_instance=0
    local setupparams=""

    while [[ $# != 0 ]] ; do
        if [[ "$1" == "--skip-build-base-image" ]] || [[ "$1" == "-s" ]] ; then
	    local skip_build_image=1
            shift
            continue
        fi
        if [[ "$1" == "--skip-spin-up-image" ]] || [[ "$1" == "-r" ]] ; then
	    local skip_spin_up_instance=1
            shift
            continue
        fi
        if [[ "$1" == "--tmpfs-build" ]] || [[ "$1" == "-t" ]] ; then
	    setupparams="${setupparams} -t"
            shift
            continue
        fi
        if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]] ; then
	    echo "--skip-build-base-image   -s"
	    echo "--skip-spin-up-image      -r"
	    echo "--tmpfs-build             -t"
	    exit 0
        fi
        break
    done

    if [[ "${skip_build_image}" == "0" ]] ; then
	build-base-image
    fi

    if [[ "${skip_spin_up_instance}" == "0" ]] ; then
	spin-up-instance
	docker exec -it llvm-rpm-run ./run root-setup ${setupparams}
    fi

    docker exec -it llvm-rpm-run ./run "$@"
}

stage0() {
    pkgbuild cmake --without test --with bootstrap
}

stage1() {
    local commit=$(grep 'global gitcommit' \
	pkgs/llvm-monolith/llvm.spec  | awk -F" " '{print $3}')
    if [[ ! -e pkgs/llvm-monolith/${commit}.tar.gz ]] ; then
	wget https://github.com/llvm/llvm-project/archive/${commit}.tar.gz -O \
	    pkgs/llvm-monolith/${commit}.tar.gz.tmp
	mv pkgs/llvm-monolith/${commit}.tar.gz.tmp pkgs/llvm-monolith/${commit}.tar.gz
    fi
    pkgbuild llvm-monolith --name llvm-11.1.0 --with bootstrap
}

stage2() {
    pkgbuild llvm --with stage1 --without check
    pkgbuild python-lit --without check
    pkgbuild clang --with python3 --with stage1 --with static_link
    pkgbuild compiler-rt --with bootstrap --with stage1
    pkgbuild libcxx --with bootstrap --with stage1
    pkgbuild libcxxabi --with stage1
    pkgbuild lld --with stage1
}

stage3() {
    pkgbuild libcxx
    pkgbuild lld --with stage2
}

build-all() {
    stage0
    stage1
    stage2
    stage3
}

"$@"
